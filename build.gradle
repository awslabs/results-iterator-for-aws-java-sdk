plugins {
    id 'java'
    id 'java-library'
    id 'application'
    id 'idea'
    id 'maven'

    // Adds dependencyUpdates task
    id 'com.github.ben-manes.versions' version '0.36.0'
}

def gradleDependencyVersion = '6.8.2'

wrapper {
    gradleVersion = gradleDependencyVersion
    distributionType = Wrapper.DistributionType.ALL
}

mainClassName = 'not-applicable'

// Specify all of our dependency versions
def slf4jVersion = '2.0.0-alpha1'
def jcabiVersion = '0.19.0'
def awsSdkVersion = '1.11.951'
def awsSdk2Version = '2.15.82'
def junitVersion = '4.13.1'
def guavaVersion = '30.1-jre'
def hamcrestVersion = '2.2'
def vavrVersion = '0.10.3'
def immutablesValueVersion = '2.8.9-ea-1'
def daggerVersion = '2.32'
def commonsTextVersion = '1.9'
def commonsIoVersion = '2.8.0'
def ztZipVersion = '1.14'
def mockitoVersion = '3.7.7'
def bouncyCastleVersion = '1.68'
def jodahFailsafeVersion = '2.4.0'
def gsonVersion = '2.8.6'

group = 'local'
version = '1.0-SNAPSHOT'

description = """"""

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()

    maven {
        url "https://repo.gradle.org/gradle/libs-releases-local/"
    }
}

dependencies {
    annotationProcessor "org.immutables:value:$immutablesValueVersion"
    annotationProcessor "org.immutables:gson:$immutablesValueVersion"

    // Dagger code generation
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    // Dependency injection with Dagger
    implementation "com.google.dagger:dagger:$daggerVersion"

    implementation "org.immutables:value:$immutablesValueVersion"
    implementation "org.immutables:gson:$immutablesValueVersion"

    implementation "org.slf4j:slf4j-log4j12:$slf4jVersion"
    implementation "com.google.guava:guava:$guavaVersion"
    implementation "io.vavr:vavr:$vavrVersion"
    implementation "org.apache.commons:commons-text:$commonsTextVersion"

    // For building Lambda functions
    implementation "commons-io:commons-io:$commonsIoVersion"
    implementation "org.zeroturnaround:zt-zip:$ztZipVersion"
    implementation "org.gradle:gradle-tooling-api:$gradleDependencyVersion"

    // SDK v2
    api "software.amazon.awssdk:aws-core:$awsSdk2Version"
    api "software.amazon.awssdk:iam:$awsSdk2Version"
    api "software.amazon.awssdk:sts:$awsSdk2Version"
    api "software.amazon.awssdk:s3:$awsSdk2Version"
    api "software.amazon.awssdk:greengrass:$awsSdk2Version"
    api "software.amazon.awssdk:iot:$awsSdk2Version"
    api "software.amazon.awssdk:iotdataplane:$awsSdk2Version"
    api "software.amazon.awssdk:lambda:$awsSdk2Version"
    api "software.amazon.awssdk:sqs:$awsSdk2Version"
    api "software.amazon.awssdk:ec2:$awsSdk2Version"
    implementation "software.amazon.awssdk:apache-client:$awsSdk2Version"

    // For certificate based authentication
    implementation "org.bouncycastle:bcprov-jdk15on:$bouncyCastleVersion"
    implementation "org.bouncycastle:bcpkix-jdk15on:$bouncyCastleVersion"

    implementation "com.google.code.gson:gson:$gsonVersion"

    testImplementation "junit:junit:$junitVersion"
    testImplementation "software.amazon.awssdk:iot:$awsSdk2Version"
    testImplementation "software.amazon.awssdk:s3:$awsSdk2Version"
    testImplementation "com.amazonaws:aws-java-sdk-iot:$awsSdkVersion"
    testImplementation "com.amazonaws:aws-java-sdk-s3:$awsSdkVersion"
    testImplementation "software.amazon.awssdk:greengrass:$awsSdk2Version"
    testImplementation "org.hamcrest:hamcrest:$hamcrestVersion"
    testImplementation "org.hamcrest:hamcrest-core:$hamcrestVersion"
    testImplementation "com.jcabi:jcabi-log:$jcabiVersion"
    testImplementation "org.mockito:mockito-core:$mockitoVersion"
    testImplementation "net.jodah:failsafe:$jodahFailsafeVersion"
}

// From: https://gist.github.com/matthiasbalke/3c9ecccbea1d460ee4c3fbc5843ede4a
task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                // Check to prevent "Resolving configuration 'integrationTestImplementation' directly is not allowed" error
                if (!configuration.getName().contains("integrationTest")) {
                    resolveConfiguration(configuration)
                }
            }
            subProject.configurations.each { configuration ->
                // Check to prevent "Resolving configuration 'integrationTestImplementation' directly is not allowed" error
                if (!configuration.getName().contains("integrationTest")) {
                    resolveConfiguration(configuration)
                }
            }
        }
    }
}

void resolveConfiguration(configuration) {
    if (isResolveableConfiguration(configuration)) {
        configuration.resolve()
    }
}

boolean isResolveableConfiguration(configuration) {
    def nonResolveableConfigurations = ['apiElements', 'implementation',
                                        'runtimeElements', 'runtimeOnly',
                                        'testImplementation', 'testRuntimeOnly',
                                        'generatedImplementation', 'generatedRuntimeOnly']

    if (nonResolveableConfigurations.contains(configuration.getName())) {
        return false
    }
    return true
}
