plugins {
    id 'java'
    id 'application'
    id 'idea'
    id 'maven'

    // Adds dependencyUpdates task
    id 'com.github.ben-manes.versions' version '0.28.0'
}

def gradleDependencyVersion = '6.1'

wrapper {
    gradleVersion = gradleDependencyVersion
    distributionType = Wrapper.DistributionType.ALL
}

mainClassName = 'not-applicable'

// Specify all of our dependency versions
def slf4jVersion = '1.7.30'
def jcabiVersion = '0.18.1'
def awsSdkVersion = '1.11.738'
def awsSdk2Version = '2.10.81'
def junitVersion = '4.13'
def guavaVersion = '28.2-jre'
def hamcrestVersion = '2.2'
def vavrVersion = '0.10.2'
def immutablesValueVersion = '2.8.3'
def daggerVersion = '2.26'

group = 'com.awslabs.aws.iot.resultsiterator'
version = '0.1'

description = """"""

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()

    maven {
        url "https://repo.gradle.org/gradle/libs-releases-local/"
    }
}

dependencies {
    annotationProcessor "org.immutables:value:$immutablesValueVersion"
    annotationProcessor "org.immutables:gson:$immutablesValueVersion"

    // Dagger code generation
    annotationProcessor "com.google.dagger:dagger-compiler:$daggerVersion"

    // Dependency injection with Dagger
    compile "com.google.dagger:dagger:$daggerVersion"

    compile "org.immutables:value:$immutablesValueVersion"
    compile "org.immutables:gson:$immutablesValueVersion"

    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    compile "com.google.guava:guava:$guavaVersion"
    compile "io.vavr:vavr:$vavrVersion"

    // SDK v2
    compileOnly "software.amazon.awssdk:aws-core:$awsSdk2Version"
    compileOnly "software.amazon.awssdk:iam:$awsSdk2Version"
    compileOnly "software.amazon.awssdk:sts:$awsSdk2Version"
    compileOnly "software.amazon.awssdk:s3:$awsSdk2Version"
    compileOnly "software.amazon.awssdk:greengrass:$awsSdk2Version"

    // SDK v1
    compileOnly "com.amazonaws:aws-java-sdk-core:$awsSdkVersion"
    compileOnly "com.amazonaws:aws-java-sdk-greengrass:$awsSdkVersion"
    compileOnly "com.amazonaws:aws-java-sdk-iot:$awsSdkVersion"
    compileOnly "com.amazonaws:aws-java-sdk-iam:$awsSdkVersion"
    compileOnly "com.amazonaws:aws-java-sdk-ec2:$awsSdkVersion"

    testCompile "junit:junit:$junitVersion"
    testCompile "software.amazon.awssdk:iot:$awsSdk2Version"
    testCompile "software.amazon.awssdk:s3:$awsSdk2Version"
    testCompile "com.amazonaws:aws-java-sdk-iot:$awsSdkVersion"
    testCompile "com.amazonaws:aws-java-sdk-s3:$awsSdkVersion"
    testCompile "software.amazon.awssdk:greengrass:$awsSdk2Version"
    testCompile "org.hamcrest:hamcrest:$hamcrestVersion"
    testCompile "com.jcabi:jcabi-log:$jcabiVersion"
}

// From: https://gist.github.com/matthiasbalke/3c9ecccbea1d460ee4c3fbc5843ede4a
task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                // Check to prevent "Resolving configuration 'integrationTestImplementation' directly is not allowed" error
                if (!configuration.getName().contains("integrationTest")) {
                    resolveConfiguration(configuration)
                }
            }
            subProject.configurations.each { configuration ->
                // Check to prevent "Resolving configuration 'integrationTestImplementation' directly is not allowed" error
                if (!configuration.getName().contains("integrationTest")) {
                    resolveConfiguration(configuration)
                }
            }
        }
    }
}

void resolveConfiguration(configuration) {
    if (isResolveableConfiguration(configuration)) {
        configuration.resolve()
    }
}

boolean isResolveableConfiguration(configuration) {
    def nonResolveableConfigurations = ['apiElements', 'implementation',
                                        'runtimeElements', 'runtimeOnly',
                                        'testImplementation', 'testRuntimeOnly',
                                        'generatedImplementation', 'generatedRuntimeOnly']

    if (nonResolveableConfigurations.contains(configuration.getName())) {
        return false
    }
    return true
}
